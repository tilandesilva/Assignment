---
- name: Collecting Web server logs and uploading to S3 bucket
  hosts: dev #host group which this play is applied
  remote_user: ec2-user #Under this user playbook is executed
  become_method:  sudo #permission changing method
  become: yes
  tasks:
    - name: Getting the web server content
      uri:
        url: http://localhost/
        return_content: yes
      register: result2 #saving output log content of the module

    - name: Saving the log files
      shell:
        cmd: "{{ item }}"
      args:
        executable: /bin/bash
      ignore_errors: yes
      loop:
        - echo "Access logs on $(date +%d/%b/%Y)" > /tmp/logs/access.txt
        - echo "Error logs on $(date +%d/%b/%Y)" > /tmp/logs/error.txt
        - cat /var/log/httpd/error_log | grep $(date +%d/%b/%Y) >> /tmp/logs/error.txt #greping the error logs and appending them
        - cat /var/log/httpd/access_log | grep $(date +%d/%b/%Y) >> /tmp/logs/access.txt #greping the access logs and appending them

    - name: Saving the Web content
      copy:
        content: "This is the current content of the server: {{ result2.content }}"
        dest: /tmp/logs/content.txt

    - name: Compressing the Logfiles and Content file
      archive:
        path: 
          - /tmp/logs/access.txt
          - /tmp/logs/error.txt
          - /tmp/logs/content.txt
        dest: /tmp/logs/log-content{{ ansible_date_time.date }}.tar.gz
        format: gz

    - name: Copying Compressed file into Control node
      fetch:
        src: /tmp/logs/log-content{{ ansible_date_time.date }}.tar.gz
        dest: /root/answer/

    - name: Uploading to the S3 bucket
      amazon.aws.aws_s3:
        bucket: web-server-log-compressed
        object: log-content{{ ansible_date_time.date }}.tar.gz
        src: /root/answer/{{ inventory_hostname }}/tmp/logs/log-content{{ ansible_date_time.date }}.tar.gz
        mode: put
      register: result3 #saving output log content of the module
      delegate_to: localhost #executing the module on localhost
      ignore_errors: yes

    - name: Deleting Compressed file
      file:
        path: /root/answer/{{ inventory_hostname }}/tmp/logs/log-content{{ ansible_date_time.date }}.tar.gz
        state:  absent
      when: result3.changed == true
      ignore_errors: yes
      delegate_to: localhost #executing the module on localhost
      
    - name: Sending an e-mail using Gmail SMTP servers
      mail:
        host: smtp.sample.lseg.com
        port: 587
        username: sample.service@lseg.com
        password: secret
        to: support.teams.sample@lseg.com
        subject: Service Failure
        body: The log files uploading failed to the S3 bucket please check this immediately.
      delegate_to: localhost #executing the module on localhost
      ignore_errors: yes
      when: result3.changed != true or result3.failed == true

